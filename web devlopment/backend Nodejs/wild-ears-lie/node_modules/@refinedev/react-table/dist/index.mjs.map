{"version":3,"sources":["../src/useTable/index.ts","../src/utils/useIsFirstRender/index.ts","../src/utils/column-filters-to-crud-filters/index.ts","../src/utils/get-removed-filters/index.ts","../src/utils/crud-filters-to-column-filters/index.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport {\n  type BaseRecord,\n  ConditionalFilter,\n  type CrudFilter,\n  CrudOperators,\n  type HttpError,\n  LogicalFilter,\n  useTable as useTableCore,\n  type useTableProps as useTablePropsCore,\n  type useTableReturnType as useTableReturnTypeCore,\n} from \"@refinedev/core\";\nimport {\n  useReactTable,\n  type TableOptions,\n  type Table,\n  getCoreRowModel,\n  ColumnFilter,\n  getSortedRowModel,\n  getFilteredRowModel,\n} from \"@tanstack/react-table\";\n\nimport {\n  useIsFirstRender,\n  columnFiltersToCrudFilters,\n  getRemovedFilters,\n  crudFiltersToColumnFilters,\n} from \"../utils\";\n\nexport type UseTableReturnType<\n  TData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n> = Table<TData> & {\n  refineCore: useTableReturnTypeCore<TData, TError>;\n};\n\nexport type UseTableProps<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TData extends BaseRecord = TQueryFnData,\n> = {\n  /**\n   * Configuration object for the core of the [useTable](/docs/api-reference/core/hooks/useTable/)\n   * @type [`useTablePropsCore<TQueryFnData, TError>`](/docs/api-reference/core/hooks/useTable/#properties)\n   */\n  refineCoreProps?: useTablePropsCore<TQueryFnData, TError, TData>;\n} & Pick<TableOptions<TData>, \"columns\"> &\n  Partial<Omit<TableOptions<TData>, \"columns\">>;\n\nexport function useTable<\n  TQueryFnData extends BaseRecord = BaseRecord,\n  TError extends HttpError = HttpError,\n  TData extends BaseRecord = TQueryFnData,\n>({\n  refineCoreProps: { hasPagination = true, ...refineCoreProps } = {},\n  initialState: reactTableInitialState = {},\n  ...rest\n}: UseTableProps<TQueryFnData, TError, TData>): UseTableReturnType<\n  TData,\n  TError\n> {\n  const isFirstRender = useIsFirstRender();\n\n  const useTableResult = useTableCore<TQueryFnData, TError, TData>({\n    ...refineCoreProps,\n    hasPagination,\n  });\n\n  const isServerSideFilteringEnabled =\n    (refineCoreProps.filters?.mode || \"server\") === \"server\";\n  const isServerSideSortingEnabled =\n    (refineCoreProps.sorters?.mode || \"server\") === \"server\";\n  const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n  const isPaginationEnabled =\n    (refineCoreProps.pagination?.mode ?? hasPaginationString) !== \"off\";\n\n  const {\n    tableQuery: { data },\n    current,\n    setCurrent,\n    pageSize: pageSizeCore,\n    setPageSize: setPageSizeCore,\n    sorters,\n    setSorters,\n    filters: filtersCore,\n    setFilters,\n    pageCount,\n  } = useTableResult;\n\n  const reactTableResult = useReactTable<TData>({\n    data: data?.data ?? [],\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: isServerSideSortingEnabled\n      ? undefined\n      : getSortedRowModel(),\n    getFilteredRowModel: isServerSideFilteringEnabled\n      ? undefined\n      : getFilteredRowModel(),\n    initialState: {\n      pagination: {\n        pageIndex: current - 1,\n        pageSize: pageSizeCore,\n      },\n      sorting: sorters.map((sorting) => ({\n        id: sorting.field,\n        desc: sorting.order === \"desc\",\n      })),\n      columnFilters: crudFiltersToColumnFilters({\n        columns: rest.columns,\n        crudFilters: filtersCore,\n      }),\n      ...reactTableInitialState,\n    },\n    pageCount,\n    manualPagination: true,\n    manualSorting: isServerSideSortingEnabled,\n    manualFiltering: isServerSideFilteringEnabled,\n    ...rest,\n  });\n\n  const { state, columns } = reactTableResult.options;\n  const { pagination, sorting, columnFilters } = state;\n\n  const { pageIndex, pageSize } = pagination ?? {};\n\n  useEffect(() => {\n    if (pageIndex !== undefined) {\n      setCurrent(pageIndex + 1);\n    }\n  }, [pageIndex]);\n\n  useEffect(() => {\n    if (pageSize !== undefined) {\n      setPageSizeCore(pageSize);\n    }\n  }, [pageSize]);\n\n  useEffect(() => {\n    if (sorting !== undefined) {\n      setSorters(\n        sorting?.map((sorting) => ({\n          field: sorting.id,\n          order: sorting.desc ? \"desc\" : \"asc\",\n        })),\n      );\n\n      if (sorting.length > 0 && isPaginationEnabled && !isFirstRender) {\n        setCurrent(1);\n      }\n    }\n  }, [sorting]);\n\n  useEffect(() => {\n    const crudFilters: CrudFilter[] = columnFiltersToCrudFilters({\n      columns,\n      columnFilters,\n    });\n\n    crudFilters.push(\n      ...getRemovedFilters({\n        nextFilters: crudFilters,\n        coreFilters: filtersCore,\n      }),\n    );\n\n    setFilters(crudFilters);\n\n    if (crudFilters.length > 0 && isPaginationEnabled && !isFirstRender) {\n      setCurrent(1);\n    }\n  }, [columnFilters, columns]);\n\n  return {\n    ...reactTableResult,\n    refineCore: useTableResult,\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport const useIsFirstRender = () => {\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    firstRender.current = false;\n  }, []);\n\n  return firstRender.current;\n};\n","import type {\n  ConditionalFilter,\n  CrudFilter,\n  CrudOperators,\n  LogicalFilter,\n} from \"@refinedev/core\";\nimport type {\n  ColumnDef,\n  ColumnFilter,\n  ColumnFiltersState,\n} from \"@tanstack/react-table\";\n\ntype Params = {\n  columnFilters?: ColumnFiltersState;\n  columns: ColumnDef<any, any>[];\n};\n\nexport const columnFiltersToCrudFilters = ({\n  columns,\n  columnFilters,\n}: Params): CrudFilter[] => {\n  return (\n    columnFilters?.map((filter) => {\n      const operator =\n        (filter as ColumnFilter & { operator?: CrudOperators }).operator ??\n        (\n          columns.find((col) => col.id === filter.id)?.meta as {\n            filterOperator?: string;\n          }\n        )?.filterOperator;\n\n      const isConditional = operator === \"and\" || operator === \"or\";\n\n      if (isConditional && Array.isArray(filter.value)) {\n        const filterKey =\n          (\n            columns.find((c) => c.id === filter.id)?.meta as {\n              filterKey?: string;\n            }\n          )?.filterKey ?? filter.id;\n\n        return {\n          key: filterKey,\n          operator: operator as ConditionalFilter[\"operator\"],\n          value: filter.value,\n        };\n      }\n      const defaultOperator = Array.isArray(filter.value) ? \"in\" : \"eq\";\n\n      return {\n        field: filter.id,\n        operator: (operator as LogicalFilter[\"operator\"]) ?? defaultOperator,\n        value: filter.value,\n      };\n    }) ?? []\n  );\n};\n","import type { CrudFilter, LogicalFilter } from \"@refinedev/core\";\n\ntype Params = {\n  nextFilters: CrudFilter[];\n  coreFilters: CrudFilter[];\n};\n\nexport const getRemovedFilters = ({\n  nextFilters,\n  coreFilters,\n}: Params): CrudFilter[] => {\n  const removedFilters = coreFilters.filter(\n    (filter) =>\n      !nextFilters.some((nextFilter) => {\n        const isFilterConditional =\n          filter.operator === \"and\" || filter.operator === \"or\";\n        const isCrudFilterConditional =\n          nextFilter.operator === \"and\" || nextFilter.operator === \"or\";\n        const hasSameOperator = filter.operator === nextFilter.operator;\n        const hasSameKey =\n          isFilterConditional &&\n          isCrudFilterConditional &&\n          filter.key === nextFilter.key;\n        const hasSameField =\n          !isFilterConditional &&\n          !isCrudFilterConditional &&\n          (filter as LogicalFilter).field ===\n            (nextFilter as LogicalFilter).field;\n\n        return hasSameOperator && (hasSameKey || hasSameField);\n      }),\n  );\n\n  return removedFilters.map((filter) => {\n    if (filter.operator === \"and\" || filter.operator === \"or\") {\n      return {\n        key: filter.key,\n        operator: filter.operator,\n        value: [],\n      };\n    }\n    return {\n      field: (filter as LogicalFilter).field,\n      operator: filter.operator,\n      value: undefined,\n    };\n  });\n};\n","import type { CrudFilter, LogicalFilter } from \"@refinedev/core\";\nimport type { ColumnDef, ColumnFilter } from \"@tanstack/react-table\";\n\ntype Params = {\n  columns: ColumnDef<any, any>[];\n  crudFilters: CrudFilter[];\n};\n\nexport const crudFiltersToColumnFilters = ({\n  columns,\n  crudFilters,\n}: Params): ColumnFilter[] => {\n  return crudFilters\n    .map((filter) => {\n      if (filter.operator === \"and\" || filter.operator === \"or\") {\n        if (filter.key) {\n          const filterId: string =\n            columns.find(\n              (col) =>\n                (col.meta as { filterKey?: string })?.filterKey === filter.key,\n            )?.id ?? filter.key;\n\n          return {\n            id: filterId,\n            operator: filter.operator,\n            value: filter.value,\n          };\n        }\n        return undefined;\n      }\n      return {\n        id: (filter as LogicalFilter).field,\n        operator: (filter as LogicalFilter).operator,\n        value: filter.value,\n      };\n    })\n    .filter(Boolean) as ColumnFilter[];\n};\n"],"mappings":"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","names":["useEffect","useTableCore","useReactTable","getCoreRowModel","getSortedRowModel","getFilteredRowModel","useEffect","useRef","useIsFirstRender","__name","firstRender","useRef","useEffect","columnFiltersToCrudFilters","__name","columns","columnFilters","filter","_a","_b","_c","_d","operator","col","c","defaultOperator","getRemovedFilters","__name","nextFilters","coreFilters","filter","nextFilter","isFilterConditional","isCrudFilterConditional","hasSameOperator","hasSameKey","hasSameField","crudFiltersToColumnFilters","__name","columns","crudFilters","filter","_a","col","useTable","hasPagination","refineCoreProps","reactTableInitialState","rest","_a","_b","_c","isFirstRender","useIsFirstRender","useTableResult","useTableCore","isServerSideFilteringEnabled","isServerSideSortingEnabled","hasPaginationString","isPaginationEnabled","data","current","setCurrent","pageSizeCore","setPageSizeCore","sorters","setSorters","filtersCore","setFilters","pageCount","reactTableResult","useReactTable","getCoreRowModel","getSortedRowModel","getFilteredRowModel","sorting","crudFiltersToColumnFilters","state","columns","pagination","columnFilters","pageIndex","pageSize","useEffect","crudFilters","columnFiltersToCrudFilters","getRemovedFilters","__name"]}