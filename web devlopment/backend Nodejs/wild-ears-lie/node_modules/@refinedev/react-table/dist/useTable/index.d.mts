import { type BaseRecord, type HttpError, type useTableProps as useTablePropsCore, type useTableReturnType as useTableReturnTypeCore } from "@refinedev/core";
import { type TableOptions, type Table } from "@tanstack/react-table";
export type UseTableReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError> = Table<TData> & {
    refineCore: useTableReturnTypeCore<TData, TError>;
};
export type UseTableProps<TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TData extends BaseRecord = TQueryFnData> = {
    /**
     * Configuration object for the core of the [useTable](/docs/api-reference/core/hooks/useTable/)
     * @type [`useTablePropsCore<TQueryFnData, TError>`](/docs/api-reference/core/hooks/useTable/#properties)
     */
    refineCoreProps?: useTablePropsCore<TQueryFnData, TError, TData>;
} & Pick<TableOptions<TData>, "columns"> & Partial<Omit<TableOptions<TData>, "columns">>;
export declare function useTable<TQueryFnData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TData extends BaseRecord = TQueryFnData>({ refineCoreProps: { hasPagination, ...refineCoreProps }, initialState: reactTableInitialState, ...rest }: UseTableProps<TQueryFnData, TError, TData>): UseTableReturnType<TData, TError>;
//# sourceMappingURL=index.d.ts.map